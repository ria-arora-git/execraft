generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum OrderStatus {
  PENDING
  PREPARING
  READY
  SERVED
  PAID
  CANCELLED
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
}

// Models
model Restaurant {
  id          String          @id @default(cuid())
  name        String
  clerkOrgId  String          @unique
  tables      Table[]
  menuItems   MenuItem[]
  inventory   InventoryItem[]
  orders      Order[]
  sessions    TableSession[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Table {
  id           String         @id @default(cuid())
  number       Int
  capacity     Int
  status       TableStatus    @default(AVAILABLE)
  token        String         @unique
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orders       Order[]
  sessions     TableSession[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([number, restaurantId])
}

model TableSession {
  id           String      @id @default(cuid())
  table        Table       @relation(fields: [tableId], references: [id])
  tableId      String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orders       Order[]
  status       String      @default("ACTIVE") 
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model MenuItem {
  id           String               @id @default(cuid())
  name         String
  description  String
  price        Float
  prepTime     Int?
  category     String
  image        String?
  restaurant   Restaurant           @relation(fields: [restaurantId], references: [id])
  restaurantId String
  ingredients  MenuItemIngredient[]
  orderItems   OrderItem[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model InventoryItem {
  id           String               @id @default(cuid())
  name         String
  quantity     Float
  unit         String
  minStock     Float
  restaurant   Restaurant           @relation(fields: [restaurantId], references: [id])
  restaurantId String
  ingredients  MenuItemIngredient[]
  alerts       StockAlert[]
  changeLogs   InventoryChangeLog[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model MenuItemIngredient {
  id              String        @id @default(cuid())
  menuItem        MenuItem      @relation(fields: [menuItemId], references: [id])
  menuItemId      String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  inventoryItemId String
  quantity        Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([menuItemId, inventoryItemId])
}

model Order {
  id            String       @id @default(cuid())
  orderNumber   String       @unique
  table         Table        @relation(fields: [tableId], references: [id])
  tableId       String
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  session       TableSession @relation(fields: [sessionId], references: [id])
  sessionId     String
  customerName  String
  customerPhone String?
  status        OrderStatus  @default(PENDING)
  total         Float
  notes         String?
  items         OrderItem[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  price      Float
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StockAlert {
  id              String        @id @default(cuid())
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  alertType       String
  threshold       Float
  message         String
  acknowledged    Boolean       @default(false)
  whatsappSent    Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model InventoryChangeLog {
  id              String        @id @default(cuid())
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  changeAmount    Float
  changeType      String
  orderId         String?
  createdAt       DateTime      @default(now())
}
